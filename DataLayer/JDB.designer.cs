#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Jumla")]
	public partial class JDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertInventoryStatuse(InventoryStatuse instance);
    partial void UpdateInventoryStatuse(InventoryStatuse instance);
    partial void DeleteInventoryStatuse(InventoryStatuse instance);
    partial void InsertOrderPriceDetail(OrderPriceDetail instance);
    partial void UpdateOrderPriceDetail(OrderPriceDetail instance);
    partial void DeleteOrderPriceDetail(OrderPriceDetail instance);
    partial void InsertOrderProcductDetail(OrderProcductDetail instance);
    partial void UpdateOrderProcductDetail(OrderProcductDetail instance);
    partial void DeleteOrderProcductDetail(OrderProcductDetail instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderShipingDetail(OrderShipingDetail instance);
    partial void UpdateOrderShipingDetail(OrderShipingDetail instance);
    partial void DeleteOrderShipingDetail(OrderShipingDetail instance);
    partial void InsertOrderStatuse(OrderStatuse instance);
    partial void UpdateOrderStatuse(OrderStatuse instance);
    partial void DeleteOrderStatuse(OrderStatuse instance);
    partial void InsertPriceCurrency(PriceCurrency instance);
    partial void UpdatePriceCurrency(PriceCurrency instance);
    partial void DeletePriceCurrency(PriceCurrency instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductSpecification(ProductSpecification instance);
    partial void UpdateProductSpecification(ProductSpecification instance);
    partial void DeleteProductSpecification(ProductSpecification instance);
    partial void InsertProductStockDetail(ProductStockDetail instance);
    partial void UpdateProductStockDetail(ProductStockDetail instance);
    partial void DeleteProductStockDetail(ProductStockDetail instance);
    partial void InsertWishList(WishList instance);
    partial void UpdateWishList(WishList instance);
    partial void DeleteWishList(WishList instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertPrivilage(Privilage instance);
    partial void UpdatePrivilage(Privilage instance);
    partial void DeletePrivilage(Privilage instance);
    partial void InsertAccountType(AccountType instance);
    partial void UpdateAccountType(AccountType instance);
    partial void DeleteAccountType(AccountType instance);
    #endregion
		
		public JDBDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.JumlaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public JDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<InventoryStatuse> InventoryStatuses
		{
			get
			{
				return this.GetTable<InventoryStatuse>();
			}
		}
		
		public System.Data.Linq.Table<OrderPriceDetail> OrderPriceDetails
		{
			get
			{
				return this.GetTable<OrderPriceDetail>();
			}
		}
		
		public System.Data.Linq.Table<OrderProcductDetail> OrderProcductDetails
		{
			get
			{
				return this.GetTable<OrderProcductDetail>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderShipingDetail> OrderShipingDetails
		{
			get
			{
				return this.GetTable<OrderShipingDetail>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatuse> OrderStatuses
		{
			get
			{
				return this.GetTable<OrderStatuse>();
			}
		}
		
		public System.Data.Linq.Table<PriceCurrency> PriceCurrencies
		{
			get
			{
				return this.GetTable<PriceCurrency>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductSpecification> ProductSpecifications
		{
			get
			{
				return this.GetTable<ProductSpecification>();
			}
		}
		
		public System.Data.Linq.Table<ProductStockDetail> ProductStockDetails
		{
			get
			{
				return this.GetTable<ProductStockDetail>();
			}
		}
		
		public System.Data.Linq.Table<WishList> WishLists
		{
			get
			{
				return this.GetTable<WishList>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Privilage> Privilages
		{
			get
			{
				return this.GetTable<Privilage>();
			}
		}
		
		public System.Data.Linq.Table<AccountType> AccountTypes
		{
			get
			{
				return this.GetTable<AccountType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CategoryId;
		
		private string _Name;
		
		private string _Descirption;
		
		private System.Nullable<System.Guid> _ParentCategoryId;
		
		private System.Nullable<System.Guid> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Category> _Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(System.Guid value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescirptionChanging(string value);
    partial void OnDescirptionChanged();
    partial void OnParentCategoryIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentCategoryIdChanged();
    partial void OnCreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Category()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Category1 = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descirption", DbType="NVarChar(MAX)")]
		public string Descirption
		{
			get
			{
				return this._Descirption;
			}
			set
			{
				if ((this._Descirption != value))
				{
					this.OnDescirptionChanging(value);
					this.SendPropertyChanging();
					this._Descirption = value;
					this.SendPropertyChanged("Descirption");
					this.OnDescirptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCategoryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentCategoryId
		{
			get
			{
				return this._ParentCategoryId;
			}
			set
			{
				if ((this._ParentCategoryId != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ParentCategoryId = value;
					this.SendPropertyChanged("ParentCategoryId");
					this.OnParentCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Categories", ThisKey="CategoryId", OtherKey="ParentCategoryId")]
		internal EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Products", ThisKey="CategoryId", OtherKey="CategoryId")]
		internal EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Category1", ThisKey="ParentCategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentCategoryId = value.CategoryId;
					}
					else
					{
						this._ParentCategoryId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ImageId;
		
		private string _Url;
		
		private System.Nullable<System.Guid> _ProductId;
		
		private bool _IsMainImage;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIdChanging(System.Guid value);
    partial void OnImageIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnProductIdChanging(System.Nullable<System.Guid> value);
    partial void OnProductIdChanged();
    partial void OnIsMainImageChanging(bool value);
    partial void OnIsMainImageChanged();
    #endregion
		
		public Image()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(MAX)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMainImage", DbType="Bit NOT NULL")]
		public bool IsMainImage
		{
			get
			{
				return this._IsMainImage;
			}
			set
			{
				if ((this._IsMainImage != value))
				{
					this.OnIsMainImageChanging(value);
					this.SendPropertyChanging();
					this._IsMainImage = value;
					this.SendPropertyChanged("IsMainImage");
					this.OnIsMainImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_User", Storage="_Users", ThisKey="ImageId", OtherKey="ProfilePictureId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Image", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryStatuses")]
	public partial class InventoryStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InventoryStatusId;
		
		private string _Name;
		
		private string _Code;
		
		private bool _IsDeleted;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryStatusIdChanging(System.Guid value);
    partial void OnInventoryStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public InventoryStatuse()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryStatusId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InventoryStatusId
		{
			get
			{
				return this._InventoryStatusId;
			}
			set
			{
				if ((this._InventoryStatusId != value))
				{
					this.OnInventoryStatusIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryStatusId = value;
					this.SendPropertyChanged("InventoryStatusId");
					this.OnInventoryStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryStatuse_Product", Storage="_Products", ThisKey="InventoryStatusId", OtherKey="InventoryStatusId")]
		internal EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.InventoryStatuse = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.InventoryStatuse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderPriceDetails")]
	public partial class OrderPriceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderPriceDetailsId;
		
		private System.Nullable<System.Guid> _OrderId;
		
		private System.Nullable<System.Guid> _PriceCurrencyId;
		
		private System.Nullable<decimal> _SubTotalPrice;
		
		private System.Nullable<decimal> _TaxPrice;
		
		private System.Nullable<decimal> _DiscountPrice;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<PriceCurrency> _PriceCurrency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderPriceDetailsIdChanging(System.Guid value);
    partial void OnOrderPriceDetailsIdChanged();
    partial void OnOrderIdChanging(System.Nullable<System.Guid> value);
    partial void OnOrderIdChanged();
    partial void OnPriceCurrencyIdChanging(System.Nullable<System.Guid> value);
    partial void OnPriceCurrencyIdChanged();
    partial void OnSubTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnSubTotalPriceChanged();
    partial void OnTaxPriceChanging(System.Nullable<decimal> value);
    partial void OnTaxPriceChanged();
    partial void OnDiscountPriceChanging(System.Nullable<decimal> value);
    partial void OnDiscountPriceChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    #endregion
		
		public OrderPriceDetail()
		{
			this._Order = default(EntityRef<Order>);
			this._PriceCurrency = default(EntityRef<PriceCurrency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderPriceDetailsId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderPriceDetailsId
		{
			get
			{
				return this._OrderPriceDetailsId;
			}
			set
			{
				if ((this._OrderPriceDetailsId != value))
				{
					this.OnOrderPriceDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._OrderPriceDetailsId = value;
					this.SendPropertyChanged("OrderPriceDetailsId");
					this.OnOrderPriceDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceCurrencyId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PriceCurrencyId
		{
			get
			{
				return this._PriceCurrencyId;
			}
			set
			{
				if ((this._PriceCurrencyId != value))
				{
					if (this._PriceCurrency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceCurrencyIdChanging(value);
					this.SendPropertyChanging();
					this._PriceCurrencyId = value;
					this.SendPropertyChanged("PriceCurrencyId");
					this.OnPriceCurrencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTotalPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SubTotalPrice
		{
			get
			{
				return this._SubTotalPrice;
			}
			set
			{
				if ((this._SubTotalPrice != value))
				{
					this.OnSubTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._SubTotalPrice = value;
					this.SendPropertyChanged("SubTotalPrice");
					this.OnSubTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TaxPrice
		{
			get
			{
				return this._TaxPrice;
			}
			set
			{
				if ((this._TaxPrice != value))
				{
					this.OnTaxPriceChanging(value);
					this.SendPropertyChanging();
					this._TaxPrice = value;
					this.SendPropertyChanged("TaxPrice");
					this.OnTaxPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> DiscountPrice
		{
			get
			{
				return this._DiscountPrice;
			}
			set
			{
				if ((this._DiscountPrice != value))
				{
					this.OnDiscountPriceChanging(value);
					this.SendPropertyChanging();
					this._DiscountPrice = value;
					this.SendPropertyChanged("DiscountPrice");
					this.OnDiscountPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderPriceDetail", Storage="_Order", ThisKey="OrderId", OtherKey="OrderId", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderPriceDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderPriceDetails.Add(this);
						this._OrderId = value.OrderId;
					}
					else
					{
						this._OrderId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceCurrency_OrderPriceDetail", Storage="_PriceCurrency", ThisKey="PriceCurrencyId", OtherKey="CurrencyId", IsForeignKey=true)]
		public PriceCurrency PriceCurrency
		{
			get
			{
				return this._PriceCurrency.Entity;
			}
			set
			{
				PriceCurrency previousValue = this._PriceCurrency.Entity;
				if (((previousValue != value) 
							|| (this._PriceCurrency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceCurrency.Entity = null;
						previousValue.OrderPriceDetails.Remove(this);
					}
					this._PriceCurrency.Entity = value;
					if ((value != null))
					{
						value.OrderPriceDetails.Add(this);
						this._PriceCurrencyId = value.CurrencyId;
					}
					else
					{
						this._PriceCurrencyId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PriceCurrency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderProcductDetails")]
	public partial class OrderProcductDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderProcductDetailsId;
		
		private System.Nullable<System.Guid> _ProcductId;
		
		private System.Nullable<System.Guid> _ProductStockDetailsId;
		
		private System.Nullable<System.Guid> _OrderId;
		
		private System.Nullable<decimal> _Profit;
		
		private System.Nullable<int> _Count;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<ProductStockDetail> _ProductStockDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderProcductDetailsIdChanging(System.Guid value);
    partial void OnOrderProcductDetailsIdChanged();
    partial void OnProcductIdChanging(System.Nullable<System.Guid> value);
    partial void OnProcductIdChanged();
    partial void OnProductStockDetailsIdChanging(System.Nullable<System.Guid> value);
    partial void OnProductStockDetailsIdChanged();
    partial void OnOrderIdChanging(System.Nullable<System.Guid> value);
    partial void OnOrderIdChanged();
    partial void OnProfitChanging(System.Nullable<decimal> value);
    partial void OnProfitChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    #endregion
		
		public OrderProcductDetail()
		{
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			this._ProductStockDetail = default(EntityRef<ProductStockDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderProcductDetailsId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderProcductDetailsId
		{
			get
			{
				return this._OrderProcductDetailsId;
			}
			set
			{
				if ((this._OrderProcductDetailsId != value))
				{
					this.OnOrderProcductDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._OrderProcductDetailsId = value;
					this.SendPropertyChanged("OrderProcductDetailsId");
					this.OnOrderProcductDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcductId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProcductId
		{
			get
			{
				return this._ProcductId;
			}
			set
			{
				if ((this._ProcductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcductIdChanging(value);
					this.SendPropertyChanging();
					this._ProcductId = value;
					this.SendPropertyChanged("ProcductId");
					this.OnProcductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductStockDetailsId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProductStockDetailsId
		{
			get
			{
				return this._ProductStockDetailsId;
			}
			set
			{
				if ((this._ProductStockDetailsId != value))
				{
					if (this._ProductStockDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductStockDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._ProductStockDetailsId = value;
					this.SendPropertyChanged("ProductStockDetailsId");
					this.OnProductStockDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profit", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Profit
		{
			get
			{
				return this._Profit;
			}
			set
			{
				if ((this._Profit != value))
				{
					this.OnProfitChanging(value);
					this.SendPropertyChanging();
					this._Profit = value;
					this.SendPropertyChanged("Profit");
					this.OnProfitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderProcductDetail", Storage="_Order", ThisKey="OrderId", OtherKey="OrderId", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderProcductDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderProcductDetails.Add(this);
						this._OrderId = value.OrderId;
					}
					else
					{
						this._OrderId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderProcductDetail", Storage="_Product", ThisKey="ProcductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderProcductDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderProcductDetails.Add(this);
						this._ProcductId = value.ProductId;
					}
					else
					{
						this._ProcductId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductStockDetail_OrderProcductDetail", Storage="_ProductStockDetail", ThisKey="ProductStockDetailsId", OtherKey="ProductStockDetailsId", IsForeignKey=true)]
		public ProductStockDetail ProductStockDetail
		{
			get
			{
				return this._ProductStockDetail.Entity;
			}
			set
			{
				ProductStockDetail previousValue = this._ProductStockDetail.Entity;
				if (((previousValue != value) 
							|| (this._ProductStockDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductStockDetail.Entity = null;
						previousValue.OrderProcductDetails.Remove(this);
					}
					this._ProductStockDetail.Entity = value;
					if ((value != null))
					{
						value.OrderProcductDetails.Add(this);
						this._ProductStockDetailsId = value.ProductStockDetailsId;
					}
					else
					{
						this._ProductStockDetailsId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ProductStockDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderId;
		
		private System.Nullable<int> _OrderStatusId;
		
		private System.Nullable<System.Guid> _OrderedBy;
		
		private System.Nullable<System.Guid> _ApprovedBy;
		
		private System.Nullable<System.DateTime> _OrderedDate;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<OrderPriceDetail> _OrderPriceDetails;
		
		private EntitySet<OrderProcductDetail> _OrderProcductDetails;
		
		private EntitySet<OrderShipingDetail> _OrderShipingDetails;
		
		private EntityRef<OrderStatuse> _OrderStatuse;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(System.Guid value);
    partial void OnOrderIdChanged();
    partial void OnOrderStatusIdChanging(System.Nullable<int> value);
    partial void OnOrderStatusIdChanged();
    partial void OnOrderedByChanging(System.Nullable<System.Guid> value);
    partial void OnOrderedByChanged();
    partial void OnApprovedByChanging(System.Nullable<System.Guid> value);
    partial void OnApprovedByChanged();
    partial void OnOrderedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderedDateChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Order()
		{
			this._OrderPriceDetails = new EntitySet<OrderPriceDetail>(new Action<OrderPriceDetail>(this.attach_OrderPriceDetails), new Action<OrderPriceDetail>(this.detach_OrderPriceDetails));
			this._OrderProcductDetails = new EntitySet<OrderProcductDetail>(new Action<OrderProcductDetail>(this.attach_OrderProcductDetails), new Action<OrderProcductDetail>(this.detach_OrderProcductDetails));
			this._OrderShipingDetails = new EntitySet<OrderShipingDetail>(new Action<OrderShipingDetail>(this.attach_OrderShipingDetails), new Action<OrderShipingDetail>(this.detach_OrderShipingDetails));
			this._OrderStatuse = default(EntityRef<OrderStatuse>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatusId", DbType="Int")]
		public System.Nullable<int> OrderStatusId
		{
			get
			{
				return this._OrderStatusId;
			}
			set
			{
				if ((this._OrderStatusId != value))
				{
					if (this._OrderStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusId = value;
					this.SendPropertyChanged("OrderStatusId");
					this.OnOrderStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderedBy
		{
			get
			{
				return this._OrderedBy;
			}
			set
			{
				if ((this._OrderedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderedByChanging(value);
					this.SendPropertyChanging();
					this._OrderedBy = value;
					this.SendPropertyChanged("OrderedBy");
					this.OnOrderedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderedDate
		{
			get
			{
				return this._OrderedDate;
			}
			set
			{
				if ((this._OrderedDate != value))
				{
					this.OnOrderedDateChanging(value);
					this.SendPropertyChanging();
					this._OrderedDate = value;
					this.SendPropertyChanged("OrderedDate");
					this.OnOrderedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderPriceDetail", Storage="_OrderPriceDetails", ThisKey="OrderId", OtherKey="OrderId")]
		internal EntitySet<OrderPriceDetail> OrderPriceDetails
		{
			get
			{
				return this._OrderPriceDetails;
			}
			set
			{
				this._OrderPriceDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderProcductDetail", Storage="_OrderProcductDetails", ThisKey="OrderId", OtherKey="OrderId")]
		internal EntitySet<OrderProcductDetail> OrderProcductDetails
		{
			get
			{
				return this._OrderProcductDetails;
			}
			set
			{
				this._OrderProcductDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderShipingDetail", Storage="_OrderShipingDetails", ThisKey="OrderId", OtherKey="OrderId")]
		internal EntitySet<OrderShipingDetail> OrderShipingDetails
		{
			get
			{
				return this._OrderShipingDetails;
			}
			set
			{
				this._OrderShipingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatuse_Order", Storage="_OrderStatuse", ThisKey="OrderStatusId", OtherKey="OrderStatusId", IsForeignKey=true)]
		public OrderStatuse OrderStatuse
		{
			get
			{
				return this._OrderStatuse.Entity;
			}
			set
			{
				OrderStatuse previousValue = this._OrderStatuse.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatuse.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderStatuse.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderStatusId = value.OrderStatusId;
					}
					else
					{
						this._OrderStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderStatuse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_User", ThisKey="OrderedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderedBy = value.UserId;
					}
					else
					{
						this._OrderedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order1", Storage="_User1", ThisKey="ApprovedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Orders1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Orders1.Add(this);
						this._ApprovedBy = value.UserId;
					}
					else
					{
						this._ApprovedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderPriceDetails(OrderPriceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderPriceDetails(OrderPriceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderProcductDetails(OrderProcductDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderProcductDetails(OrderProcductDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderShipingDetails(OrderShipingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderShipingDetails(OrderShipingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderShipingDetails")]
	public partial class OrderShipingDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderShipingDetailsId;
		
		private System.Nullable<System.Guid> _OrderId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Phone;
		
		private string _City;
		
		private string _District;
		
		private string _Floor;
		
		private string _Appartment;
		
		private string _Address;
		
		private string _SpecialNotes;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderShipingDetailsIdChanging(System.Guid value);
    partial void OnOrderShipingDetailsIdChanged();
    partial void OnOrderIdChanging(System.Nullable<System.Guid> value);
    partial void OnOrderIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnFloorChanging(string value);
    partial void OnFloorChanged();
    partial void OnAppartmentChanging(string value);
    partial void OnAppartmentChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSpecialNotesChanging(string value);
    partial void OnSpecialNotesChanged();
    #endregion
		
		public OrderShipingDetail()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderShipingDetailsId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderShipingDetailsId
		{
			get
			{
				return this._OrderShipingDetailsId;
			}
			set
			{
				if ((this._OrderShipingDetailsId != value))
				{
					this.OnOrderShipingDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._OrderShipingDetailsId = value;
					this.SendPropertyChanged("OrderShipingDetailsId");
					this.OnOrderShipingDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(250)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(250)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(250)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(250)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(250)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="NVarChar(250)")]
		public string Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appartment", DbType="NVarChar(250)")]
		public string Appartment
		{
			get
			{
				return this._Appartment;
			}
			set
			{
				if ((this._Appartment != value))
				{
					this.OnAppartmentChanging(value);
					this.SendPropertyChanging();
					this._Appartment = value;
					this.SendPropertyChanged("Appartment");
					this.OnAppartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialNotes", DbType="NVarChar(MAX)")]
		public string SpecialNotes
		{
			get
			{
				return this._SpecialNotes;
			}
			set
			{
				if ((this._SpecialNotes != value))
				{
					this.OnSpecialNotesChanging(value);
					this.SendPropertyChanging();
					this._SpecialNotes = value;
					this.SendPropertyChanged("SpecialNotes");
					this.OnSpecialNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderShipingDetail", Storage="_Order", ThisKey="OrderId", OtherKey="OrderId", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderShipingDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderShipingDetails.Add(this);
						this._OrderId = value.OrderId;
					}
					else
					{
						this._OrderId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderStatuses")]
	public partial class OrderStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderStatusId;
		
		private string _Name;
		
		private string _Code;
		
		private bool _IsDeleted;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderStatusIdChanging(int value);
    partial void OnOrderStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public OrderStatuse()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderStatusId
		{
			get
			{
				return this._OrderStatusId;
			}
			set
			{
				if ((this._OrderStatusId != value))
				{
					this.OnOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusId = value;
					this.SendPropertyChanged("OrderStatusId");
					this.OnOrderStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(250)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatuse_Order", Storage="_Orders", ThisKey="OrderStatusId", OtherKey="OrderStatusId")]
		internal EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatuse = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatuse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceCurrency")]
	public partial class PriceCurrency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CurrencyId;
		
		private string _Name;
		
		private string _Code;
		
		private bool _IsDeleted;
		
		private EntitySet<OrderPriceDetail> _OrderPriceDetails;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrencyIdChanging(System.Guid value);
    partial void OnCurrencyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public PriceCurrency()
		{
			this._OrderPriceDetails = new EntitySet<OrderPriceDetail>(new Action<OrderPriceDetail>(this.attach_OrderPriceDetails), new Action<OrderPriceDetail>(this.detach_OrderPriceDetails));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CurrencyId
		{
			get
			{
				return this._CurrencyId;
			}
			set
			{
				if ((this._CurrencyId != value))
				{
					this.OnCurrencyIdChanging(value);
					this.SendPropertyChanging();
					this._CurrencyId = value;
					this.SendPropertyChanged("CurrencyId");
					this.OnCurrencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceCurrency_OrderPriceDetail", Storage="_OrderPriceDetails", ThisKey="CurrencyId", OtherKey="PriceCurrencyId")]
		internal EntitySet<OrderPriceDetail> OrderPriceDetails
		{
			get
			{
				return this._OrderPriceDetails;
			}
			set
			{
				this._OrderPriceDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceCurrency_Product", Storage="_Products", ThisKey="CurrencyId", OtherKey="PriceCurrencyId")]
		internal EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderPriceDetails(OrderPriceDetail entity)
		{
			this.SendPropertyChanging();
			entity.PriceCurrency = this;
		}
		
		private void detach_OrderPriceDetails(OrderPriceDetail entity)
		{
			this.SendPropertyChanging();
			entity.PriceCurrency = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.PriceCurrency = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.PriceCurrency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductId;
		
		private System.Nullable<System.Guid> _InventoryStatusId;
		
		private System.Nullable<System.Guid> _CategoryId;
		
		private System.Nullable<System.Guid> _PriceCurrencyId;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _OldPrice;
		
		private System.Nullable<decimal> _ShipingPrice;
		
		private System.Nullable<decimal> _ServicePrice;
		
		private System.Nullable<int> _Rating;
		
		private System.Nullable<System.Guid> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<Image> _Images;
		
		private EntitySet<OrderProcductDetail> _OrderProcductDetails;
		
		private EntitySet<ProductSpecification> _ProductSpecifications;
		
		private EntitySet<ProductStockDetail> _ProductStockDetails;
		
		private EntitySet<WishList> _WishLists;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<InventoryStatuse> _InventoryStatuse;
		
		private EntityRef<PriceCurrency> _PriceCurrency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(System.Guid value);
    partial void OnProductIdChanged();
    partial void OnInventoryStatusIdChanging(System.Nullable<System.Guid> value);
    partial void OnInventoryStatusIdChanged();
    partial void OnCategoryIdChanging(System.Nullable<System.Guid> value);
    partial void OnCategoryIdChanged();
    partial void OnPriceCurrencyIdChanging(System.Nullable<System.Guid> value);
    partial void OnPriceCurrencyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnOldPriceChanging(System.Nullable<decimal> value);
    partial void OnOldPriceChanged();
    partial void OnShipingPriceChanging(System.Nullable<decimal> value);
    partial void OnShipingPriceChanged();
    partial void OnServicePriceChanging(System.Nullable<decimal> value);
    partial void OnServicePriceChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    partial void OnCreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Product()
		{
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			this._OrderProcductDetails = new EntitySet<OrderProcductDetail>(new Action<OrderProcductDetail>(this.attach_OrderProcductDetails), new Action<OrderProcductDetail>(this.detach_OrderProcductDetails));
			this._ProductSpecifications = new EntitySet<ProductSpecification>(new Action<ProductSpecification>(this.attach_ProductSpecifications), new Action<ProductSpecification>(this.detach_ProductSpecifications));
			this._ProductStockDetails = new EntitySet<ProductStockDetail>(new Action<ProductStockDetail>(this.attach_ProductStockDetails), new Action<ProductStockDetail>(this.detach_ProductStockDetails));
			this._WishLists = new EntitySet<WishList>(new Action<WishList>(this.attach_WishLists), new Action<WishList>(this.detach_WishLists));
			this._Category = default(EntityRef<Category>);
			this._InventoryStatuse = default(EntityRef<InventoryStatuse>);
			this._PriceCurrency = default(EntityRef<PriceCurrency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryStatusId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> InventoryStatusId
		{
			get
			{
				return this._InventoryStatusId;
			}
			set
			{
				if ((this._InventoryStatusId != value))
				{
					if (this._InventoryStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryStatusIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryStatusId = value;
					this.SendPropertyChanged("InventoryStatusId");
					this.OnInventoryStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceCurrencyId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PriceCurrencyId
		{
			get
			{
				return this._PriceCurrencyId;
			}
			set
			{
				if ((this._PriceCurrencyId != value))
				{
					if (this._PriceCurrency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceCurrencyIdChanging(value);
					this.SendPropertyChanging();
					this._PriceCurrencyId = value;
					this.SendPropertyChanged("PriceCurrencyId");
					this.OnPriceCurrencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> OldPrice
		{
			get
			{
				return this._OldPrice;
			}
			set
			{
				if ((this._OldPrice != value))
				{
					this.OnOldPriceChanging(value);
					this.SendPropertyChanging();
					this._OldPrice = value;
					this.SendPropertyChanged("OldPrice");
					this.OnOldPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipingPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ShipingPrice
		{
			get
			{
				return this._ShipingPrice;
			}
			set
			{
				if ((this._ShipingPrice != value))
				{
					this.OnShipingPriceChanging(value);
					this.SendPropertyChanging();
					this._ShipingPrice = value;
					this.SendPropertyChanged("ShipingPrice");
					this.OnShipingPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicePrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ServicePrice
		{
			get
			{
				return this._ServicePrice;
			}
			set
			{
				if ((this._ServicePrice != value))
				{
					this.OnServicePriceChanging(value);
					this.SendPropertyChanging();
					this._ServicePrice = value;
					this.SendPropertyChanged("ServicePrice");
					this.OnServicePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int")]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Image", Storage="_Images", ThisKey="ProductId", OtherKey="ProductId")]
		internal EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderProcductDetail", Storage="_OrderProcductDetails", ThisKey="ProductId", OtherKey="ProcductId")]
		internal EntitySet<OrderProcductDetail> OrderProcductDetails
		{
			get
			{
				return this._OrderProcductDetails;
			}
			set
			{
				this._OrderProcductDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductSpecification", Storage="_ProductSpecifications", ThisKey="ProductId", OtherKey="ProductId")]
		internal EntitySet<ProductSpecification> ProductSpecifications
		{
			get
			{
				return this._ProductSpecifications;
			}
			set
			{
				this._ProductSpecifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductStockDetail", Storage="_ProductStockDetails", ThisKey="ProductId", OtherKey="ProductId")]
		internal EntitySet<ProductStockDetail> ProductStockDetails
		{
			get
			{
				return this._ProductStockDetails;
			}
			set
			{
				this._ProductStockDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_WishList", Storage="_WishLists", ThisKey="ProductId", OtherKey="ProductId")]
		internal EntitySet<WishList> WishLists
		{
			get
			{
				return this._WishLists;
			}
			set
			{
				this._WishLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryStatuse_Product", Storage="_InventoryStatuse", ThisKey="InventoryStatusId", OtherKey="InventoryStatusId", IsForeignKey=true)]
		public InventoryStatuse InventoryStatuse
		{
			get
			{
				return this._InventoryStatuse.Entity;
			}
			set
			{
				InventoryStatuse previousValue = this._InventoryStatuse.Entity;
				if (((previousValue != value) 
							|| (this._InventoryStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryStatuse.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._InventoryStatuse.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._InventoryStatusId = value.InventoryStatusId;
					}
					else
					{
						this._InventoryStatusId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("InventoryStatuse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceCurrency_Product", Storage="_PriceCurrency", ThisKey="PriceCurrencyId", OtherKey="CurrencyId", IsForeignKey=true)]
		public PriceCurrency PriceCurrency
		{
			get
			{
				return this._PriceCurrency.Entity;
			}
			set
			{
				PriceCurrency previousValue = this._PriceCurrency.Entity;
				if (((previousValue != value) 
							|| (this._PriceCurrency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceCurrency.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._PriceCurrency.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._PriceCurrencyId = value.CurrencyId;
					}
					else
					{
						this._PriceCurrencyId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PriceCurrency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderProcductDetails(OrderProcductDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderProcductDetails(OrderProcductDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductSpecifications(ProductSpecification entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductSpecifications(ProductSpecification entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductStockDetails(ProductStockDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductStockDetails(ProductStockDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_WishLists(WishList entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_WishLists(WishList entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductSpecification")]
	public partial class ProductSpecification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductSpecificationId;
		
		private string _Name;
		
		private string _Value;
		
		private System.Nullable<System.Guid> _ProductId;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductSpecificationIdChanging(System.Guid value);
    partial void OnProductSpecificationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnProductIdChanging(System.Nullable<System.Guid> value);
    partial void OnProductIdChanged();
    #endregion
		
		public ProductSpecification()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSpecificationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductSpecificationId
		{
			get
			{
				return this._ProductSpecificationId;
			}
			set
			{
				if ((this._ProductSpecificationId != value))
				{
					this.OnProductSpecificationIdChanging(value);
					this.SendPropertyChanging();
					this._ProductSpecificationId = value;
					this.SendPropertyChanged("ProductSpecificationId");
					this.OnProductSpecificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(250)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductSpecification", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductSpecifications.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductSpecifications.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductStockDetails")]
	public partial class ProductStockDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductStockDetailsId;
		
		private string _Size;
		
		private string _Color;
		
		private System.Nullable<int> _NumAvailableInStock;
		
		private System.Nullable<System.Guid> _ProductId;
		
		private EntitySet<OrderProcductDetail> _OrderProcductDetails;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductStockDetailsIdChanging(System.Guid value);
    partial void OnProductStockDetailsIdChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnNumAvailableInStockChanging(System.Nullable<int> value);
    partial void OnNumAvailableInStockChanged();
    partial void OnProductIdChanging(System.Nullable<System.Guid> value);
    partial void OnProductIdChanged();
    #endregion
		
		public ProductStockDetail()
		{
			this._OrderProcductDetails = new EntitySet<OrderProcductDetail>(new Action<OrderProcductDetail>(this.attach_OrderProcductDetails), new Action<OrderProcductDetail>(this.detach_OrderProcductDetails));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductStockDetailsId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductStockDetailsId
		{
			get
			{
				return this._ProductStockDetailsId;
			}
			set
			{
				if ((this._ProductStockDetailsId != value))
				{
					this.OnProductStockDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._ProductStockDetailsId = value;
					this.SendPropertyChanged("ProductStockDetailsId");
					this.OnProductStockDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="NVarChar(250)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(250)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumAvailableInStock", DbType="Int")]
		public System.Nullable<int> NumAvailableInStock
		{
			get
			{
				return this._NumAvailableInStock;
			}
			set
			{
				if ((this._NumAvailableInStock != value))
				{
					this.OnNumAvailableInStockChanging(value);
					this.SendPropertyChanging();
					this._NumAvailableInStock = value;
					this.SendPropertyChanged("NumAvailableInStock");
					this.OnNumAvailableInStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductStockDetail_OrderProcductDetail", Storage="_OrderProcductDetails", ThisKey="ProductStockDetailsId", OtherKey="ProductStockDetailsId")]
		internal EntitySet<OrderProcductDetail> OrderProcductDetails
		{
			get
			{
				return this._OrderProcductDetails;
			}
			set
			{
				this._OrderProcductDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductStockDetail", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductStockDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductStockDetails.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderProcductDetails(OrderProcductDetail entity)
		{
			this.SendPropertyChanging();
			entity.ProductStockDetail = this;
		}
		
		private void detach_OrderProcductDetails(OrderProcductDetail entity)
		{
			this.SendPropertyChanging();
			entity.ProductStockDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WishList")]
	public partial class WishList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WishId;
		
		private System.Nullable<System.Guid> _ProductId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWishIdChanging(System.Guid value);
    partial void OnWishIdChanged();
    partial void OnProductIdChanging(System.Nullable<System.Guid> value);
    partial void OnProductIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    #endregion
		
		public WishList()
		{
			this._Product = default(EntityRef<Product>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WishId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WishId
		{
			get
			{
				return this._WishId;
			}
			set
			{
				if ((this._WishId != value))
				{
					this.OnWishIdChanging(value);
					this.SendPropertyChanging();
					this._WishId = value;
					this.SendPropertyChanged("WishId");
					this.OnWishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_WishList", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.WishLists.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.WishLists.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WishList", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WishLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WishLists.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Nullable<System.Guid> _PrivilageId;
		
		private System.Nullable<System.Guid> _AccountTypeId;
		
		private System.Nullable<System.Guid> _ProfilePictureId;
		
		private string _Name;
		
		private string _Email;
		
		private string _Password;
		
		private string _Address;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.Guid> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Order> _Orders1;
		
		private EntitySet<WishList> _WishLists;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<Privilage> _Privilage;
		
		private EntityRef<AccountType> _AccountType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPrivilageIdChanging(System.Nullable<System.Guid> value);
    partial void OnPrivilageIdChanged();
    partial void OnAccountTypeIdChanging(System.Nullable<System.Guid> value);
    partial void OnAccountTypeIdChanged();
    partial void OnProfilePictureIdChanging(System.Nullable<System.Guid> value);
    partial void OnProfilePictureIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public User()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
			this._WishLists = new EntitySet<WishList>(new Action<WishList>(this.attach_WishLists), new Action<WishList>(this.detach_WishLists));
			this._Image = default(EntityRef<Image>);
			this._Privilage = default(EntityRef<Privilage>);
			this._AccountType = default(EntityRef<AccountType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivilageId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PrivilageId
		{
			get
			{
				return this._PrivilageId;
			}
			set
			{
				if ((this._PrivilageId != value))
				{
					if (this._Privilage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrivilageIdChanging(value);
					this.SendPropertyChanging();
					this._PrivilageId = value;
					this.SendPropertyChanged("PrivilageId");
					this.OnPrivilageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountTypeId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccountTypeId
		{
			get
			{
				return this._AccountTypeId;
			}
			set
			{
				if ((this._AccountTypeId != value))
				{
					if (this._AccountType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AccountTypeId = value;
					this.SendPropertyChanged("AccountTypeId");
					this.OnAccountTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilePictureId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProfilePictureId
		{
			get
			{
				return this._ProfilePictureId;
			}
			set
			{
				if ((this._ProfilePictureId != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfilePictureIdChanging(value);
					this.SendPropertyChanging();
					this._ProfilePictureId = value;
					this.SendPropertyChanged("ProfilePictureId");
					this.OnProfilePictureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(255)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_Orders", ThisKey="UserId", OtherKey="OrderedBy")]
		internal EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order1", Storage="_Orders1", ThisKey="UserId", OtherKey="ApprovedBy")]
		internal EntitySet<Order> Orders1
		{
			get
			{
				return this._Orders1;
			}
			set
			{
				this._Orders1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WishList", Storage="_WishLists", ThisKey="UserId", OtherKey="UserId")]
		internal EntitySet<WishList> WishLists
		{
			get
			{
				return this._WishLists;
			}
			set
			{
				this._WishLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_User", Storage="_Image", ThisKey="ProfilePictureId", OtherKey="ImageId", IsForeignKey=true)]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._ProfilePictureId = value.ImageId;
					}
					else
					{
						this._ProfilePictureId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Privilage_User", Storage="_Privilage", ThisKey="PrivilageId", OtherKey="PrivilageId", IsForeignKey=true)]
		public Privilage Privilage
		{
			get
			{
				return this._Privilage.Entity;
			}
			set
			{
				Privilage previousValue = this._Privilage.Entity;
				if (((previousValue != value) 
							|| (this._Privilage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Privilage.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Privilage.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._PrivilageId = value.PrivilageId;
					}
					else
					{
						this._PrivilageId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Privilage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountType_User", Storage="_AccountType", ThisKey="AccountTypeId", OtherKey="AccountTypeId", IsForeignKey=true)]
		public AccountType AccountType
		{
			get
			{
				return this._AccountType.Entity;
			}
			set
			{
				AccountType previousValue = this._AccountType.Entity;
				if (((previousValue != value) 
							|| (this._AccountType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountType.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._AccountType.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._AccountTypeId = value.AccountTypeId;
					}
					else
					{
						this._AccountTypeId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AccountType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_WishLists(WishList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WishLists(WishList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Privilages")]
	public partial class Privilage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PrivilageId;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrivilageIdChanging(System.Guid value);
    partial void OnPrivilageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Privilage()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivilageId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PrivilageId
		{
			get
			{
				return this._PrivilageId;
			}
			set
			{
				if ((this._PrivilageId != value))
				{
					this.OnPrivilageIdChanging(value);
					this.SendPropertyChanging();
					this._PrivilageId = value;
					this.SendPropertyChanged("PrivilageId");
					this.OnPrivilageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Privilage_User", Storage="_Users", ThisKey="PrivilageId", OtherKey="PrivilageId")]
		internal EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Privilage = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Privilage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTypes")]
	public partial class AccountType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AccountTypeId;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountTypeIdChanging(System.Guid value);
    partial void OnAccountTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public AccountType()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountTypeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AccountTypeId
		{
			get
			{
				return this._AccountTypeId;
			}
			set
			{
				if ((this._AccountTypeId != value))
				{
					this.OnAccountTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AccountTypeId = value;
					this.SendPropertyChanged("AccountTypeId");
					this.OnAccountTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountType_User", Storage="_Users", ThisKey="AccountTypeId", OtherKey="AccountTypeId")]
		internal EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.AccountType = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.AccountType = null;
		}
	}
}
#pragma warning restore 1591
